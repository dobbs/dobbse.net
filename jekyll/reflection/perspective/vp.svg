<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" 
   "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"
   [
      <!ENTITY ns_svg "http://www.w3.org/2000/svg">
      <!ENTITY ns_xlink "http://www.w3.org/1999/xlink">
   ]>
<!-- copyright (c) 2003 Eric Dobbs. All rights reserved. -->
<svg xmlns="&ns_svg;" xmlns:xlink="&ns_xlink;" width="430" height="300" 
     viewBox="0 0 430 300" overflow="visible" onload="init(evt);">

  <style type="text/css">
  <![CDATA[
    .show {display: normal;fill:none;stroke:black;stroke-width:1;}
    .hide {display: none;}  

    #Observer,#PointOfView {stroke: brown;}
    #GroundPlane,#GroundLineL,#GroundLineR {stroke: green;}
    #PicturePlane,#ProjectedLineL,#ProjectedLineR {stroke: purple;}
    #VanishingPoint {stroke: purple; fill:purple;}
    #ProjectorL,#ProjectorR {stroke: blue;}
  ]]>
  </style>

  <script type="text/ecmascript">
  <![CDATA[

    function round(n,digits) {
      var x = Math.pow(10,digits);
      return Math.round(n * x) / x;
    }

    function apply(fn, list) {
      for(var i=0;i<list.length;i++) {
        fn(list[i])
      }
    }

    function map(fn, list) {
      var newlist = [];
      for(var i=0;i<list.length;i++) {
        newlist.push(fn(list[i]));
      }
      return newlist;
    }

    function intersection(line1,line2) {
      var x1 = line1.start[0];
      var y1 = line1.start[1];
      var x2 = line1.end[0];
      var y2 = line1.end[1];
      var x3 = line2.start[0];
      var y3 = line2.start[1];
      var x4 = line2.end[0];
      var y4 = line2.end[1];

      var denominator = (((y4-y3)*(x2-x1))-((x4-x3)*(y2-y1)));
      if (denominator == 0) {
        return;
      }

      var u = (((x4-x3)*(y1-y3))-((y4-y3)*(x1-x3)))/denominator;
      var xi = x1 - 0 + (u * (x2 - x1));
      var yi = y1 - 0 + (u * (y2 - y1));
      return [round(xi,3),round(yi,3)];
    }

    function createIntersector(lineA,lineB) {
      return function(point) {
        var p = intersection(lineA,lineB);
        point[0] = p[0];
        point[1] = p[1];
      }
    }

    function createTranslator(start,end,steps) {
      var delta = [ round((end[0] - start[0])/steps,3) , 
                    round((end[1] - start[1])/steps,3) ]
      return function(point) {
        // the '- 0' is necessary to force a numerical context
        point[0] = round(point[0] - 0 + delta[0],3);
        point[1] = round(point[1] - 0 + delta[1],3);
      }
    }

    function Point(id) {
      this.id = id;
      this.obj = svgDocument.getElementById(id)
      var x = this.obj.getAttribute("cx")
      var y = this.obj.getAttribute("cy")
      this.center = [x,y]
      this.radius = this.obj.getAttribute("r")
    }
    Point.prototype.refresh = function () {
      this.obj.setAttribute("cx",this.center[0])
      this.obj.setAttribute("cy",this.center[1])
      this.obj.setAttribute("r",this.radius)
    }
    Point.prototype.show = function() {
      this.obj.setAttribute("class","show");
    }
    Point.prototype.hide = function() {
      this.obj.setAttribute("class","hide");
    }

    function Line(id) {
      this.id = id;
      this.obj = svgDocument.getElementById(id)
      var d = this.obj.getAttribute("d");
      var coords = 
        d.match(/^M(-?\d+\.\d+),?(-?\d+\.\d+)L(-?\d+\.\d+),?(-?\d+\.\d+)/);
      this.start = [coords[1],coords[2]];
      this.end = [coords[3],coords[4]];
    }
    Line.prototype.refresh = function() {
      var startcomma = ',';
      var endcomma = ',';
      if (this.start[1] < 0) { startcomma = ''; }
      if (this.end[1] < 0) {endcomma = ''; }
      this.obj.setAttribute('d',
        'M' + this.start[0] + startcomma  + this.start[1]
        + 'L' + this.end[0] + endcomma + this.end[1]);
    }
    Line.prototype.moveEnd = function(point) {
      this.end[0] = point[0];
      this.end[1] = point[1];
    }
    Line.prototype.show = function() {
      this.obj.setAttribute("class","show");
    }
    Line.prototype.hide = function() {
      this.obj.setAttribute("class","hide");
    }

    function Vline(start,end) {
      this.start = start;
      this.end = end;
    }


    function createCommand(list) {
      var fn = list.shift();
      var limit = (typeof list[list.length - 1] == 'number') ? list.pop() : -1;
      return function() {
        if (arguments.length > 0) {
          return (limit == -1 || limit);
        }
        if (limit != 0) {
          apply(fn,list)
          limit--;
        }
      }
    }

    function isFunctionList(arg) {
      return (typeof arg == 'object' && arg.constructor == Array
              && typeof arg[0] == 'function');
    }

    var MSG = ''
    function pCommand(arg) {
      if (isFunctionList(arg)) {
        MSG += '{';
        var fn = arg.shift();
        var limit = (typeof arg[arg.length - 1] == 'number') ? arg.pop() : -1;
        var list = arg;
	if (! isFunctionList(list[0])) {
          MSG += '.';
          return function() {
            if (arguments.length > 0) {
              return (limit == -1 || limit);
            }
            if (limit != 0) {
              apply(fn,list)
              limit--;
            }
          }
        }
        var result = map(pCommand,list);
        MSG += '}';
        return result;
      }
      return arg;
    }

    // construct a tree of Commands from Command Lists of one of these two forms:
    // 	   [function, object0, object1, object2]
    // 	   [function, object0, object1, object2, frameCount]
    // objects may be nested Command lists
    function parseCommandList(maybeList) {
      if (typeof maybeList == 'object' 
          && maybeList.constructor == Array
          && typeof maybeList[0] == 'function') {
        var fn = maybeList.shift();
        var limit = (typeof maybeList[maybeList.length - 1] == 'number') ? maybeList.pop() : -1;
        var list = maybeList;
        var command = createCommand([fn].concat(map(parseCommandList,list),limit));
        return command;
      } else {
        return maybeList;
      }
    }

    function createAnimation() {
      commandList = map(parseCommandList,arguments);
      return function () {
        if (arguments.length) {return commandList.length}
        if (commandList.length && commandList[0]('hasMoreFrames')) {
          commandList[0]();
        } else {
          commandList.shift();
        }
      }
    }

    var anim;
    var timeout;
    var userClickedStop;
    var frameRate = 40;
    var delay = 1000/frameRate;
    var groundlineR;

    function init(evt) {
      if ( window.svgDocument == null )
        svgDocument = evt.target.ownerDocument;
      var frameCount = 200;
      var projectorR = new Line('ProjectorR');
      groundlineR = new Line('GroundLineR');
      var projectorL = new Line('ProjectorL');
      var groundlineL = new Line('GroundLineL');
      var projectedLineR = new Line('ProjectedLineR');
      var projectedLineL = new Line('ProjectedLineL');
      var vProjectorL = new Vline(projectorL.start,projectorL.end);
      var vProjectorR = new Vline(projectorR.start,projectorR.end);
      var vGroundlineL = new Vline(groundlineL.start,groundlineL.end);
      var vGroundlineR = new Vline(groundlineR.start,groundlineR.end);
      var vanishingPoint = new Point('VanishingPoint');

      function runEach(command) {command()}
      function showAndRefreshEach(line) {line.show();line.refresh()}
      function refreshEach(line) {line.refresh()}
      function zeroEach(line) {line.moveEnd(line.start)}

      var refreshLines = [projectorR,groundlineR,projectorL,groundlineL,projectedLineR,
         projectedLineL];

      anim = createAnimation(
        [runEach,
          [zeroEach,groundlineR,groundlineL,projectedLineR,projectedLineL],
          [function(point){point.hide();refreshEach(point);},vanishingPoint],
          [function(line){line.moveEnd(groundlineR.start)},projectorR],
          [function(line){line.moveEnd(groundlineL.start)},projectorL],
          [showAndRefreshEach,projectorR,groundlineR,projectorL,groundlineL,projectedLineR,projectedLineL],
        1],

        [runEach,
          [createTranslator(groundlineR.start,groundlineR.end,frameCount),
            projectorR.end,projectorL.end,groundlineR.end,groundlineL.end],
          [createIntersector(projectorR,new Line(projectedLineR.id)),
            projectedLineR.end],
          [createIntersector(projectorL,new Line(projectedLineL.id)),
            projectedLineL.end],
          [refreshEach].concat(refreshLines),
        frameCount],

        [runEach,
          [createIntersector(projectedLineR,projectedLineL),
            projectedLineR.end,projectedLineL.end],
          [function(line){line.moveEnd([1193.374,-93.990])},
            projectorR,projectorL],
          [function(line){line.hide()},projectorL],
          [refreshEach].concat(refreshLines),
          [function(p){p.radius = 3;showAndRefreshEach(p)},vanishingPoint],
        1]

      );
    }

    function go() {
      if (!userClickedStop && anim('hasMoreFrames')) {
        anim();
        timeout = setTimeout("go()",delay);
      }
    }

    function start() {
      userClickedStop = 0;
      if (! anim('hasMoreFrames')) {
        init();
      }
      timeout = setTimeout("go()",delay);
    }

    function stop() {
      userClickedStop = 1;
    }

  ]]>
  </script>
  
  <path id="GroundPlane" class="show" d="M246.112,276.526l-138.444,31.492L1.8,270.776l138.442-31.493L246.112,276.526z"/>
  <path id="PicturePlane" class="show" d="M246.165,105.75l-0.053,170.777l-105.868-37.242l0.051-170.778L246.165,105.75z"/>
  <g id="Observer" class="show">
    <path d="M98.724,174.549l-28.226-9.852v-28.227l28.226,9.852V174.549z"/>
    <path d="M85.82,281.738"/>
    <path d="M55.175,186.366l61.29,21.391"/>
    <path d="M67.272,274.861l18.549-36.269"/>
    <path d="M104.369,287.81L85.82,238.595"/>
    <path d="M85.82,238.595v-69.356"/>
  </g>
  <circle id="PointOfView" cx="85.82" cy="157.948" r="2"/>
  <circle class="hide" id="VanishingPoint" cx="192.163" cy="133.757" r="2"/>
  <path class="hide" id="ProjectedLineR" d="M246.112,276.526L192.163,133.757"/>
  <path class="hide" id="ProjectedLineL" d="M140.245,239.284L192.163,133.757"/>
  <path class="hide" id="ProjectorR" d="M85.82,157.948L246.112,276.526"/>
  <path class="hide" id="GroundLineR" d="M246.112,276.526L1353.666,24.588"/>
  <path class="hide" id="ProjectorL" d="M85.82,157.948L140.245,239.284"/>
  <path class="hide" id="GroundLineL" d="M140.245,239.284L694.023,113.315"/>

  <g id="go" onclick="start();">
    <rect x="10" y="10" width="40" height="20" rx="4" ry="4" style="fill:#ddd;"/>
    <text x="30" y="25" style="text-anchor: middle;">Go</text>
  </g>

  <g id="stop" onclick="stop();">
    <rect x="60" y="10" width="40" height="20" rx="4" ry="4" style="fill:#ddd;"/>
    <text x="80" y="25" style="text-anchor: middle;">Stop</text>
  </g>

  <text id="message" x="160" y="25" style="text-anchor: left;"> </text>
</svg>
<!-- Google for SVG Open 2003 conference -->